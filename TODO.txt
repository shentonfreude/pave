===========
 TODO/Done
===========

To Do
=====


* Search: do query based on form input, return results using same project_list.html
* Search form should get choices from DB, not from constants.py file
* Main Browse: show Open and recently Closed Projects
* Display Job Series in Projects List as just the number, not description; while leaving it descriptive in the Admin UI
* Sane defaults, e.g., Status=Approved, PayCode=GS
* Why doesn't PAVE Project Details show: Pay Plan, Series Codes, Grade Levels, NASA Centers
* Admin date input doesn't accept: 03/16/2012 -- what does it want? 2012-03-02
* Admin: selector for All NASA Centers, All Job Code Series (or use Empty as signifier; how affects search?)
* Generate project_number: PAVE-yyyy-center-office-####
* Specific field types like EmailField: see https://docs.djangoproject.com/en/dev/ref/models/fields/
* Date-picker
* Apply for Project: center and name verificaiton, supervisor info, justification: needs LDAP access ("fieldset"?)
* Apply: LDAP lookup to verify first, last, center.
* CSV, JSON output

Done
====

CSS
---

It's progressing. See static/css/base.css.

How to load images (e.g., <imr src=...>) and css
------------------------------------------------

settings.py::

  PROJECT_PATH = os.path.abspath(os.path.split(__file__)[0])
  TEMPLATE_DIRS = (
      os.path.join(PROJECT_PATH, "templates"),
  )
  STATICFILES_DIRS = (
      os.path.join(PROJECT_PATH, "static"), # put /css/ and /js/ under this
  )

templates/base.html::

  <head>
    <link href="{{STATIC_URL}}/css/base.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <header id="banner">
      <img src="{{STATIC_URL}}/img/paveheader1.gif" />
    </header>

static assets in:
- .../pave/static/css/base.css
- .../pave/static/img/paveheader1.gif
- .../pave/static/js/*

Menubar style horizontal
------------------------

base.css::
  nav#menubar ul{
      background-color: #99c6e7;  /*original PAVE color*/
      width: 100%;
      float: left;
      list-style: none;
      margin: 0 0 3em 0;
      padding: 0;
      border-top: 1px solid red;
      border-bottom: 2px solid #0183b5; /*worm-logo earth blue*/
  }
  nav#menubar li {
      float: left;
  }
  nav#menubar li a {
      display: block;
      padding: 8px 15px;
      text-decoration: none;
      font-weight: bold;
      border-right: 1px solid #0183b5; /*worm-logo earth blue*/
      }

CSRF for forms
--------------

project/views.py::

  from django.core.context_processors import csrf
  from django.shortcuts import render_to_response
  from django.template import RequestContext
  ...
      return render_to_response('search.html',
                                {'form': form},
                                context_instance=RequestContext(request));

search.html::

  <form id="search" method="POST" action=".">{% csrf_token %}


URL template references to urls.py names
----------------------------------------

Use {% url ... %} template tag in base.html::

  <li><a href="{% url home %}">Home</a></li>
  <li><a href="{% url projects %}">Browse</a></li>
  <li><a href="{% url search %}">Search</a></li>


Multiselect fields must use ManyToManyField(Choices)
----------------------------------------------------

Define foreign models and link to them in models.py::

  class Project(Model):
      ...
      series_codes		= ManyToManyField(JobCode)
      grade_levels		= ManyToManyField(GradeLevel)
      nasa_centers		= ManyToManyField(Center, related_name='Centers')
      owner                       = ForeignKey(User, unique=False, blank=False)
      applicant                   = ForeignKey(Applicant, unique=False, blank=True, null=True)

Cycle bars on table displays
----------------------------

In base.css::
  table tr.odd {
      background-color: #dddddd;
  }
  table tr.even {
      background-color: #eeeeee;
  }

In project_list.html::

  {% for project in object_list %}
  <tr class="{% cycle 'odd' 'even' %}">


Link project_listing to individual project details
--------------------------------------------------

project/urls.py::

    url(r'^(?P<object_id>\d+)/$',  object_detail, info_dict, name="details"),

project_list.html::

      <td><a href="{% url details object_id=project.id %}">{{project.project_number}}</a></td>

Detailed listing
----------------

See project_details.html


Create sample Closed and Cancelled jobs, Export sample jobs as fixture
----------------------------------------------------------------------

We manually cut-paste Projects from PAVE into Django PAVE to create content.

In a virtual environment at /Users/cshenton/Projects/core/pave/pave::

 ./manage.py dumpdata --format=json --indent=4 --exclude=auth --exclude=admin project.project > fixtures/project_project.json

Then we can load all the fixtures with::

  ./manage.py loaddata fixtures/*.json

Make Objectives a TextField (bigger)
------------------------------------

In models.py, change CharField(max_length=80,...) to::

    objectives                  = TextField(max_length=2000, blank=True)
    skill_mix                   = TextField(max_length=2000, blank=True)

Add Cancel Date and Cancel Reason to project
--------------------------------------------

Add to models.py::

  cancel_date                 = DateField(blank=True, null=True, help_text="YYYY-MM-DD")
  cancel_reason               = TextField(max_length=2000, blank=True)

Add cancel_date to each project in fixtures/project_project.json::

            "cancel_date": null,
            "cancel_reason": "",

Wipe the DB, syncdb, and reload the fixtures.
